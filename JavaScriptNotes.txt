JavaScript
// History
- Brandon Eich 1995 Js founder
- Mocha first name=> live script=> JavaScript=> ECMAScript 
- Netscape company=> Netscape Navigator.
- ES6 most popular version

// Feature  of JavaScript
- Synchronous
- High level	(understandable for both human as well as machine)
- Interpreted	(interpreter task is to run code line by line)
- Single threaded
- Object Based (everything is object)
- Object Oriented		
- Loosely Type=> Does not enforce strict type rules.			
- Dynamically typed	=> JS Engine allows variables to hold values of any data type at runtime. This allows type coercion
- Case Sensitive
- Scripting Language	


// Tokens smallest units of any programming language
- Keywords=> var, let, const, if, else, continue, console, log, for, switch, break, while do, for each => predefined, cannot used as identifiers, 
- Identifiers=> Name given to variables by programmer => special case cant used except $ and _. cant start with no, cant use space between 2 words 
- Punctuators/separator=> Special char or symbols which has some specific meaning ex. , : ; "" `` {} ()
- Operators=> Special char which are use to perform operations between operands arithmetic, assignment, bitwise, typeOf, ternary , equality compare(loosely, Strictly)
- Literals => 
  
// Literals => Datatype=> Primitives - one which cannot further breakdown
	      User defined - collection of both  primitive as well as user defined as single dt type
- Number and BigInt => Range of number -(2^53-1)>x>(2^53-1) beyond that we store in bigint (a=10n)
- Boolean true or false =>
- Null (intentionally empty) 
- Undefined 
- String
- Symbol=> Using symbols are unique. i.e. even if we value of 2 symbols is same but still it will be unique (== shows false)

//  Internals of JS
- Number will directly converted into binary but char will be converted to char-> asci-> hex -> binary
- JS file embedded in html file=> js engine =>Inside js engine there will be parser that will parse js code into chunks and stored in tree like structure AST(Abstract structure tree)
  =>each chunk is passed to just in time compiler to compile and convert into byte code and sent to interpreter => Interpreter converts byte code to machine understandable code=> processor will process code and gets o/p. 

// short circuits in js




// prompt=> Similar to scanner to take inputs
- when you cancel prompt it gives null.
- Default input type String


// Backticks
` This is string declare using backticks${}` => this is called as “template literals” and writing js in that string using ${} is called as interpolation


// Heap 
- Window is parent object it contains multiple nested objects
- Window obj stored in heap area like other and is super obj of other obj 
- Dom is inside window obj 
- all first gen child of window obj we can directly access by name ex. window.alert() = alert()(achieved using destructuring)
- all non primitive datatype stored inside window obj
- variables declared using in global scope are also stored into window obj

// Call stack
- It has Global execution context(GEC) => will have 2 diff part/phases => variable declaration phase and execution phase
- For every function call function execution phase will be added into call stack.
- as soon as function get called immediate another call stack will get created for function separately


// Scopes=> Scope determines the accessibility (visibility) of variables.
Block=>Inside another braces/scope => Var doesn't support Block scoping variables declared using let or const cannot be accessible outside the block it will show error.But var variables are accessible.   
Function=> Variables declared within a JavaScript function, are LOCAL to the function. Variables declare using var,let,const can only access within function 
Global=> declared+ initialized outside block
  


//Function - Reusable block of code which has some task 
	   - Arguments are passed as parameter first as soon as function get call and after that it will start executing code 
Types of function:
	- Simple function
	- Arrow function=> - Way to write functions more clear=> (parameters)=>{ //Body } 
					   - Implicit return for single line of code ex. let add=()=>(num1+num2); 
					   - Arrow functions do not create their own this binding i.e this inside arrow function will give empty obj
    	Key Difference: Regular Function vs Arrow Function => (explanation D:\Frontend\JavaScript\InterviewQuestions\this-keyword\question1.js)
			Regular Function: this depends on how the function is called. In the global context, this refers to the global object (window in browsers).
			Arrow Function: this is lexically bound and always refers to the this of the outer (enclosing) scope when the function is created. It doesn't have its own this
			
	- Higher order functions=> Function which expects another function as an argument or function that returns another function  is HOF

	- Callback functions=> And function which is passed as argument inside function parameters is callback function.
					Problems in Callback=> 1. Call Back hell => Passing Function into function and nested again function to that funct
											    func(func(func(....))) This is readability problem.
										   2. Inversion of Control(IOC) => There is no assurance whether that function is used or not.
										   							  Functionality of your code depends on other i.e control of your code goes to other one this is IOC
																	  ex. Team a and Team b is there team a write main func and team b write logic inside callback funct. if callback function(team b) is changed then that causes problem in team A also.

	- Anonymous function=> Function which doesn't have name is anonymous function.

	- JavaScript currying()() function will immediate invoke calling output function on same line 
	  when we are returning nested function instead of storing that returned function into new variable we can immediately call that returned function using js currying.
	
	- Immediate Invoke function expression(IIFE)//immediate popups this kind of scenarios use this type of function ex. cookies, ad => (()=>{”This is immediate invoke function”}) (). function declaration + call on same line


// Temporal Dead zone
- Time span in between variable declaration(1) and initialization(2) is temporal dead zone
  
 |  VD	    |	    exp		    |	
 | var a;(1)|    clg(start);	|
 | var y;   |    a=100;	(2)	    |	

// Memory allocation in main GEC for var let const
- Variable declared using var will get memory in heap(window area) where as for let and const it will store into gec itself only and will get destroyed as soon as call is over. Hence we get undefined for var even declared after accessing.
- this is variable which is assign to window object by default in js i.e. var this=window
- let and const doesn't allow to access when they are in temporal dead zone hence it will get error if we access before initialization


// Hoisting
- Variable declared in declaration phase taking to execution phase is hoisting
- let, Var, const all 3 are hoisted 
- ability to move variable declared in top of execution context  

// lexical scoping
- The ability of js to search for variables in the outer function/parent function. 
  ex.let outerVar = "I am from outer";
  function inner() {
    console.log(outerVar); // Accessible due to lexical scope
  }

// Closures
- Closure is separate memory allocation 
- If we are trying to access variables in child function from parent function then we are able to do that because of closure.
- Closure will get created for only functions. when variables are required from parent function  then only closure will store variable.
- It is the memory allocation which will store variables that we are trying to access in child function but declared in parent function. Closure will be created even if the parent function is removed from the call stack.



// Objects=>
1.Ways to create object in js.
	-- Way 1: Creating object using obj literal way--
		let user={ 
    		    name: "Rahul", 
    		    age: 23, 
    		    degree: "BE" 
		}

	-- Way2: Using new keyword --
		class Demo{
 		   //constructors is declare like this
		    constructor(name,age){
		        this.name=name;
	   	        this.age=age;
	   	    }
	 	}
		let obj=new Demo("Rahul",23);
	
	-- Way3.1 : Using object class --
		let example=new Object();
		example.name="Rahul"

	-- Way3.2 : Using object class --
		let example=new Object({name:"Rohit"});
		console.log(example)

	-- Way 4 : using Object.create() --
		let example3=Object.create({});//compulsory to pass empty object
		example3.name="Tinku";
		console.log(example3);
	-- Way 5 : Using constructor function --
		function Student(name,age){
    	             this.name=name;
    		     this.age=age;
		}
		let student1= new Student("yash",21);
		console.log(student1);
	-- Way 6 : By returning obj into function --
		let example5=(name,age)=>{
		    return {
		        name:name,
		        age:age
		    };
		}
		let val=example5("surya",36)//this will not treated as class 
		let val2=example5("Rishabh",32)
		console.log(val);
		console.log(val2);

2. Crud Operations
- Read operation
  - Entire object
     console.log(car)
  
  - Individual properties
     console.log(car["brand"]);
     console.log(car.color);
- Update
     car.color="Black"

- Delete
    delete car.price
    we cannot delete entire obj can delete only properties

3. Methods of Object class
    	- Object.keys(objRef); //returns array of key
	- Object.values(objRef); //returns array of all values
	- Object.assign(target,objRef) //Assigns all prop of objRef into target obj 	
	- Object.entries(car)	//convert obj into an array in format=[[key1,val1],[ke2,val2]...]
	- Object.fromEntries(format)	//above formatted array must be passed to get back arr into obj
	- JSON.stringify(car);	//Object conversion into json format
	- JSON.parse(jsonObj)	//Json to Obj conversion
	- Object.freeze(objRef)	//nor can add new prop to obj neither update
	- Object.seal(objRef);  //Can update prop butt cannot add new prop
	- Object.isFrozen()	//Way to check if freezed or not
	- Object.isSealed()	//true if either sealed or frozen




// This keywords scenarios
In global(window),blocks(window), object{2 scenario => arrow function(window), regular function(curr obj)}, object(nested functions{2 scenario => arrow function(curr)because of lexical scoping, regular function(window obj)}

//call apply bind
- Ways to bind current obj with this keyword
- All 3 used to link this with any external object (*compulsory we should use regular funct not arrow)
- Call and apply has only different syntax
- Bind will have same syntax as call but bind will return reference of function for future use.

// Prototypes

// Shallow copy-Deep copy
- Shallow => copy array changes will be reflected in original array
- deep=> copy array changes will not be reflected in original array


// String 
- In js string we can access char using indexes ex. str[0]
- trimStart = -Remove extra spaces from start   
- trimend = Remove extra spaces 
- trim - both end remove
- toUpperCase
- toLowerCase
- includes
- padStart
- padEnd
- slice
- subString
- substr
- replace
- replaceAll
- split
- length
- startsWith
- endsWith
- toString
- indexOf
- lastIndexOf
- at
- charAt
- charCodeAt

// Array
- flat(depth) => Flattens array up to nested depth and return
- push => add new element to end and returns new length
- pop => removes element from last and return that element
- shift => removes element from first and returns 
- Unshift => add to from start and return new length
- slice => slice(start,end)=> returns new array sliced from start ro end-1
- splice => modifiable slice method=> will modify array=>(start,length,replaceWith)
- forEach => Used to iterate over array and it will not return anything
- map => Similar to forEach will return array which will get modified
- reverse => reverse array
- filter => will get filtered array based on condition
- reduce => Reduces an array to single value by executing logic
	//reduce(clb(accumulator,value,index,array),initial value of accumulator=> default arr[0]) => 4 arguments can be passed.
- sort =>  Will modify sorted array and return
- find => similar to filter but filter will check for entire array and find will match 1st time and return from that point only.
- Arrays.isArray => returns true if passed arg is an array
- join("Seprator") => joins all element with seprator  and returns string 
- from => converts string into array

//Destructuring => 


# Asynchronous programming

// Timers
while using for with setTimeout var will print 10 times 10 but when use let it will print 0->10 as var is function scope it will update same location but let is block scope hence it will update into diff instance of i.


//promises=> Doc for reference => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise 
- The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
- At the time when the constructor generates the new Promise object, it also generates a corresponding pair of functions for resolveFunc and rejectFunc.
- It is a synchronous block of code and it will not console promise unless promise res or rej get executed. Code inside executor function can be sync or async 
- Why promises needed??=> Before Promises, JavaScript relied heavily on callbacks for handling asynchronous operations (e.g., fetching data, reading files, or handling user input). 
						However, callbacks had several problems like callback hell, IOC, no error handling, inconsistent data handling.
- Solutions=> 1. Eliminates callback hell → Chaining (.then()) makes code readable.
			  2. Built-in error handling → .catch() simplifies error handling.
			  3. Predictable execution → Promises always execute in the correct order.
			  4. Composability → We can chain multiple async operations easily.
			  
example=> Callback hell
		  getUser(1, (user) => {
			  getOrders(user, (orders) => {
				    getOrderDetails(orders[0], (details) => {
				    	console.log(details);
			    	});
			  });
		  });



//Promises
getUser(1)
  .then(getOrders)
  .then(getOrderDetails)
  .then(console.log)
  .catch(console.error);

- An object that is used as a placeholder for the eventual results of a deferred (and possibly asynchronous) computation.
- Promises are one of these 3 states=> 1.pending: initial state, neither fulfilled nor rejected.
									   2.fulfilled: meaning that the operation was completed successfully .
									   3.rejected: meaning that the operation failed.

- Promise resolved means operation completed whether that could be successful or failed.Finally block will get called when resolved sucessfully.
- Promise Methods=> 
		1.Promise.all() => - Static method takes an iterable of promises as input and returns a single Promise. 
						- This returned promise fulfills when all of the input's promises fulfilled including when empty iterable is passed.
						- It rejects when any of the input's promises rejects, with this first rejection reason
		2.Promise.allSettled() => - Static method takes an iterable of promises as input and returns a single Promise.
						- This returned promise fulfills when all of the input's promises settle(both rejected and fulfilled)(including when an empty iterable is passed), 
						  with an array of objects that describe the outcome of each promise.
						- Wait for all even if some failed
						- Return value=>  { status: 'fulfilled/Rejected', value: 'Task 1' / reason:'Promise rejection reason' } like this object for each promise passed in iterable
		3.Promise.race()=> - Returns the first settled promise, whether fulfilled or rejected.
						- Useful when you only care about the fastest result.
						- The Promise.race() method is one of the promise concurrency methods. 
						  It's useful when you want the first async task to complete, but do not care about its eventual state
- Every .then(Function FulfilHandler,Function rejectionHandler ) creates a new promise, which resolves when the callback inside .then() completes. The original promise remains unchanged.
- Each promise has PromiseState,PromiseResult,Prototype as promise in it.
- Promise will always be in pending unless all code in sync block get execute. Resolve and reject is just triggering value to change PromiseState and PromiseValue
- Any code after resolve and reject will also get executed. 
- for a promise only once resolve or reject get executed and if written two times resolve then it will not modify first resolve PromiseResult
- Note that if you call resolveFunc and pass another promise object as an argument, the initial promise can be said to be "resolved", but still not "settled".
- The executor(promise obj callback function) return value is ignored
- . then are just registerer it will register all fulfilled and rejected function into an array.
	It will not wait for res() or rej(). if res() get called means promise state is changed to fulfilled then fulFillHandler array functions will get called.
- Each .then adds new fulfilledHandler and rejectionHandler into array
- Task of Microtask is to execute this fulfilledHandlers and rejectionHandlers
Example=> 
console.log("Start");

const myPromise = new Promise((resolve, reject) => {
  console.log("Inside Promise");
  setTimeout(() => {
    resolve("Promise Resolved");
  }, 1000);
});

myPromise.then((value) => {
  console.log(value);
});

console.log("End");



Step-by-Step Execution:
console.log("Start") is executed

This is a synchronous operation, so it executes immediately.
Output: Start
Stored in: Call Stack (Executes and gets removed)
Creating a Promise (new Promise)

The function inside new Promise() runs immediately.
Memory Storage:
myPromise is stored in the Heap Memory.
The executor function (resolve, reject) => {} is called.
Output: Inside Promise
setTimeout() is triggered

setTimeout(() => { resolve("Promise Resolved"); }, 1000); is a Web API call (handled by the browser, not JavaScript itself).
The timer starts, but does NOT block execution.
Stored in: Web APIs (handled by the browser)
myPromise.then() is encountered

then() registers a callback to be executed later when the promise is resolved.
Stored in: Microtask Queue (not executed yet)
JavaScript does not pause; it continues execution.
console.log("End") is executed

Since this is synchronous, it runs immediately.
Output: End
Stored in: Call Stack (Executes and gets removed)
After 1 second (setTimeout completes)

The resolve("Promise Resolved") function is called.
The Promise is now fulfilled.
The registered .then() callback moves from the Microtask Queue to the Call Stack.
Promise Callback is executed
console.log("Promise Resolved") runs inside .then().
Output: Promise Resolved
Stored in: Call Stack (Executes and gets removed)


//Async await


// Dom


// Events
1. click=>
2. 


// Modules=>
- Used to import and export repetitive block of code
- In html you have to mention type=module in script target
- Even if you dont mention exported script in html the imported script will find in directory and get required thing from script
- Internally exporting and importing module is using immediate invoke function.
	Types=> - Named export => 
				- Same name while importing and curly braces compulsory
				- Exporting do not need default keyword
				- Can send multiple objects in single file.
				- Can be exported on same line of variable declaration 
			- Default export => 
				- Any name while importing no need of same name , no curly braces needed.
				- Have to use default keyword.
				- Can use default only once hence can send only one wrapped object.
				- Default keyword should not be on same line of variable declaration



//			

